package com.grocottlab.atlas_toolkit;

/**
 * Atlas Toolkit plugin for ImageJ and Fiji.
 * Copyright (C) 2015 Timothy Grocott 
 *
 * More information at http://www.grocottlab.com/software
 *
 * This file is part of Atlas Toolkit.
 * 
 * Atlas Toolkit is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (http://www.gnu.org/licenses/gpl.txt )
 *
 * Atlas Toolkit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A class for holding 2D (XY) transformation coefficients as generated by bUnwarpJ.
 * 
 * The OrthogonalTransformSequence class contains a number of instances of OrthogonalTransform,
 * one for each orthogonal plane in each iteration.
 */
public class OrthogonalTransform implements java.io.Serializable {
    
    private double[][] x_coefficients;
	private double[][] y_coefficients;
	private int intervals;

	/**
         * 
         * @param x_coefficients A double[][] containing the X coefficients generated by bUnwarpJ.
         * @param y_coefficients A double[][] containing the Y coefficients generated by bUnwarpJ.
         * @param intervals 
         */
        public OrthogonalTransform(double[][] x_coefficients, double[][] y_coefficients, int intervals) {

		this.x_coefficients = x_coefficients;
		this.y_coefficients = y_coefficients;
		this.intervals = intervals;
	}	

	/**
         * 
         * @param transform An instance of bunwarpj.Transformation
         */
        public OrthogonalTransform(bunwarpj.Transformation transform) {

		x_coefficients = transform.getDirectDeformationCoefficientsX();
		y_coefficients = transform.getDirectDeformationCoefficientsY();
		intervals = transform.getIntervals();
	}

	/**
         * Calculates the mean average X and Y coefficients from a set of OrthogonalTransform objects.
         * 
         * By calculating the mean coefficients for a group of pairwise transforms, a number of 2D 
         * images can be registered in group-wise fashion.
         * 
         * @param ot A set of OrthogonalTransform objects to be averaged.
         * @return A single OrthogonalTransform object containing the mean average X and Y coefficients.
         */
        static public OrthogonalTransform computeAverageTransform(OrthogonalTransform[] ot) {

		// Get x_coeff
		double [][] first_x_coeff = ot[0].getCoefficientsX();
		int x_dim_1 = first_x_coeff.length;
		int x_dim_2 = first_x_coeff[0].length;
		double [][][] x_coeff = new double [ot.length][x_dim_1][x_dim_2];
		for (int i = 0; i < ot.length; i++) {

			x_coeff[i] = ot[i].getCoefficientsX();
		}

		// Calculate mean_x_coeff
		double [][] mean_x_coeff = new double [x_dim_1][x_dim_2];
					
			// Iterate through x_dim_1
			for (int i1 = 0; i1 < x_dim_1; i1++) {

				// Iterate through x_dim_2
				for (int i2 = 0; i2 < x_dim_2; i2++) {

					double coeff_total = 0.0;
						
					// Iterate through x_coeff
					for (int pair = 0; pair < ot.length; pair++) {

						coeff_total = coeff_total + x_coeff[pair][i1][i2];
					}

					mean_x_coeff[i1][i2] = ( coeff_total / (double)(ot.length) );
				}
			}

		// Get y_coeff
		double [][] first_y_coeff = ot[0].getCoefficientsY();
		int y_dim_1 = first_y_coeff.length;
		int y_dim_2 = first_y_coeff[0].length;
		double [][][] y_coeff = new double [ot.length][y_dim_1][y_dim_2];
		for (int i = 0; i < ot.length; i++) {

			y_coeff[i] = ot[i].getCoefficientsY();
		}

		// Calculate mean_y_coeff
		double [][] mean_y_coeff = new double [y_dim_1][y_dim_2];
					
			// Iterate through y_dim_1
			for (int i1 = 0; i1 < y_dim_1; i1++) {

				// Iterate through y_dim_2
				for (int i2 = 0; i2 < y_dim_2; i2++) {

					double coeff_total = 0.0;
						
					// Iterate through y_coeff
					for (int pair = 0; pair < ot.length; pair++) {

						coeff_total = coeff_total + y_coeff[pair][i1][i2];
					}

					mean_y_coeff[i1][i2] = ( coeff_total / (double)(ot.length) );
				}
			}

		return new OrthogonalTransform(mean_x_coeff, mean_y_coeff, ot[0].getIntervals() );
	}

	/**
         * Gets the X coefficients generated by bUnwarpJ.
         * 
         * @return A double[][] containing the X coefficients.
         */
        public double[][] getCoefficientsX () {

		return x_coefficients;
	}

	/**
         * Gets the Y coefficients generated by bUnwarpJ.
         * 
         * @return A double[][] containing the X coefficients.
         */
        public double[][] getCoefficientsY () {

		return y_coefficients;
	}

	public int getIntervals () {

		return intervals;
	}
}
